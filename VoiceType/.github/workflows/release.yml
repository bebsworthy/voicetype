name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 1.0.0)'
        required: true
        type: string

env:
  XCODE_VERSION: '15.0'

jobs:
  build-and-release:
    name: Build and Release
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Select Xcode
        run: sudo xcode-select -s /Applications/Xcode_${{ env.XCODE_VERSION }}.app
        
      - name: Determine version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "push" ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          else
            VERSION=${{ github.event.inputs.version }}
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Building version $VERSION"
          
      - name: Cache Swift packages
        uses: actions/cache@v3
        with:
          path: .build
          key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-spm-
            
      - name: Import certificates
        env:
          CERTIFICATES_P12: ${{ secrets.CERTIFICATES_P12 }}
          CERTIFICATES_PASSWORD: ${{ secrets.CERTIFICATES_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # Create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          
          # Import certificate from secrets
          echo -n "$CERTIFICATES_P12" | base64 --decode --output $CERTIFICATE_PATH
          
          # Create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          
          # Import certificate to keychain
          security import $CERTIFICATE_PATH -P "$CERTIFICATES_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          
      - name: Build release
        env:
          DEVELOPER_ID_APPLICATION: ${{ secrets.DEVELOPER_ID_APPLICATION }}
          DEVELOPMENT_TEAM: ${{ secrets.DEVELOPMENT_TEAM }}
        run: |
          ./Scripts/build.sh release universal
          
      - name: Sign app
        env:
          DEVELOPER_ID_APPLICATION: ${{ secrets.DEVELOPER_ID_APPLICATION }}
          DEVELOPMENT_TEAM: ${{ secrets.DEVELOPMENT_TEAM }}
        run: |
          ./Scripts/sign.sh build/VoiceType.app
          
      - name: Create release package
        env:
          DEVELOPER_ID_APPLICATION: ${{ secrets.DEVELOPER_ID_APPLICATION }}
          DEVELOPMENT_TEAM: ${{ secrets.DEVELOPMENT_TEAM }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
        run: |
          ./Scripts/release.sh ${{ steps.version.outputs.version }} ${{ github.run_number }}
          
      - name: Clean up keychain
        if: always()
        run: |
          security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
          rm -f $RUNNER_TEMP/certificate.p12
          
      - name: Upload release artifacts
        uses: actions/upload-artifact@v3
        with:
          name: release-${{ steps.version.outputs.version }}
          path: |
            build/*.dmg
            build/release-*/
            
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          name: VoiceType v${{ steps.version.outputs.version }}
          body_path: build/RELEASE_NOTES.md
          files: |
            build/*.dmg
            build/release-*/checksums.txt
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Update Homebrew Formula
        if: success()
        run: |
          # This would update a Homebrew tap if you have one
          echo "TODO: Update Homebrew formula with version ${{ steps.version.outputs.version }}"

  notify:
    name: Notify Release
    needs: build-and-release
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Send notification
        run: |
          if [[ "${{ needs.build-and-release.result }}" == "success" ]]; then
            echo "Release successful! üéâ"
            # Add webhook notification here
          else
            echo "Release failed! ‚ùå"
            # Add error notification here
          fi